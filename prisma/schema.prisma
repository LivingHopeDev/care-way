// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum Role {
  PROVIDER
  PATIENT
  ADMIN
}
enum ProviderStatus {
  PENDING
  APPROVED
  REJECTED
}
model User {
  id        String   @id @unique @default(uuid())
  name      String
  email     String   @unique
  phone     String   @unique
  password  String
  gender    String
    isVerified        Boolean  @default(false)

  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  provider  Provider?
  patient   Patient?
otp       Otp[]
session  Session?
  @@map("users")
}

model Provider {
  id                String   @id @unique @default(uuid())
  userId            String   @unique
  specialization    String
  availability      Json     
  operatingHours    String?
  fees              Float
  location           Json     
  documents         String
  profileImage String @default("https://iau.edu.lc/wp-content/uploads/2016/09/dummy-image.jpg")
  status            ProviderStatus  @default(PENDING)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id],onDelete: Cascade)

  @@map("providers")
  @@index([status])
  @@index([location])
}

model Patient {
  id        String   @id @unique @default(uuid())
  userId    String   @unique
  location   Json     
  profileImage String @default("https://iau.edu.lc/wp-content/uploads/2016/09/dummy-image.jpg")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id],onDelete: Cascade)

  @@map("patients")
}


model Otp {
  id     String   @id @unique @default(uuid())
  token  String
  userId String
  expiry DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("otps")
}

model Session {
  id     String @id @unique @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id],onDelete: Cascade)

  sessionToken String
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  @@index([userId])
  @@map("sessions")
}