// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
generator dbml {
  provider = "prisma-dbml-generator"
}


enum Role {
  PROVIDER
  PATIENT
  ADMIN
}

enum ProviderStatus {
  PENDING
  APPROVED
  REJECTED
}

enum AppointmentStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED
}

model User {
  id         String  @id @unique @default(uuid())
  name       String
  email      String  @unique
  phone      String
  password   String
  gender     String
  isVerified Boolean @default(false)

  role      Role
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  provider  Provider?
  patient   Patient?
  otp       Otp[]
  session   Session?

  @@map("users")
}

model Provider {
  id             String         @id @unique @default(uuid())
  userId         String         @unique
  specialization String
  fees           Float
  state          String
  street         String
  city           String
  country        String
  bus_stop       String
  profileImage   String         @default("https://iau.edu.lc/wp-content/uploads/2016/09/dummy-image.jpg")
  status         ProviderStatus @default(PENDING)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  availability   Availability[]
  documents      Document[]
  appointments   Appointment[]
  review         Review[]

  @@index([status])
  @@map("providers")
}

model Patient {
  id           String        @id @unique @default(uuid())
  userId       String        @unique
  profileImage String        @default("https://iau.edu.lc/wp-content/uploads/2016/09/dummy-image.jpg")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointment  Appointment[]
  review       Review[]

  @@map("patients")
}

model Availability {
  id           String        @id @unique @default(uuid())
  providerId   String
  date         DateTime
  startTime    DateTime
  endTime      DateTime
  provider     Provider      @relation(fields: [providerId], references: [id], onDelete: Cascade)
  appointments Appointment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([providerId])
  @@map("availabilities")
}

model Appointment {
  id              String       @id @unique @default(uuid())
  reason          String
  patientId       String
  providerId      String
  availabilityId  String
  appointmentDate DateTime
  startTime       DateTime
  endTime         DateTime
  availability    Availability @relation(fields: [availabilityId], references: [id], onDelete: Cascade)
  patient         Patient      @relation(fields: [patientId], references: [id], onDelete: Cascade)
  provider        Provider     @relation(fields: [providerId], references: [id], onDelete: Cascade)

  status    AppointmentStatus @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@index([patientId])
  @@map("appointments")
}

model Document {
  id         String   @id @unique @default(uuid())
  providerId String
  fileUrl    String
  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([providerId])
  @@map("documents")
}

model Review {
  id         String   @id @unique @default(uuid())
  rating     Int
  feedback   String
  providerId String
  patientId  String
  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  patient    Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Otp {
  id     String   @id @unique @default(uuid())
  token  String
  userId String
  expiry DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("otps")
}

model Session {
  id     String @id @unique @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  sessionToken String
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  @@index([userId])
  @@map("sessions")
}
